package com.aurionpro;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.entity.Student;
import com.aurionpro.exception.StudentExceptionResponse;
import com.aurionpro.exception.StudentNotFoundException;
import com.aurionpro.repository.StudentRepository;
import com.aurionpro.service.StudentService;


@RestController
@RequestMapping("app")
public class StudentController {
	private StudentService service;

	public StudentController(StudentService service) {
		super();
		this.service = service;
	}
	
	@GetMapping("/students")
	public ResponseEntity<List<Student>> getAllStudents(){
		return new ResponseEntity<>(service.findAll(),HttpStatus.OK);
	}
	
	@GetMapping("/students/{studentId}")
	public ResponseEntity<Student>  getStudentById(@PathVariable int studentId) throws StudentNotFoundException {
		Student student=null;
		
			student= service.findStudentById(studentId);
		
		return new ResponseEntity<>(student,HttpStatus.OK);
	}
		
	@PostMapping("/students")
		public ResponseEntity<Student>  addStudent(@RequestBody Student student) {
			return new ResponseEntity<>(service.saveStudent(student),HttpStatus.CREATED);
	}
	
	@DeleteMapping("/students/{id}")
	public ResponseEntity<HttpStatus> deleteStudent(@PathVariable int id) throws StudentNotFoundException {
		service.deleteById(id);
		return new ResponseEntity<> (HttpStatus.OK);
	}
	
	@ExceptionHandler
	public ResponseEntity<StudentExceptionResponse>handleException(StudentNotFoundException e){
		StudentExceptionResponse error = new StudentExceptionResponse();
		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(e.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		
		return new ResponseEntity<>(error,HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler
	public ResponseEntity<StudentExceptionResponse>handleException(Exception e){
		StudentExceptionResponse error = new StudentExceptionResponse();
		error.setStatus(HttpStatus.BAD_REQUEST.value());
		error.setMessage("Invalid Message");
		error.setTimeStamp(System.currentTimeMillis());
		
		return new ResponseEntity<>(error,HttpStatus.NOT_FOUND);
	}
	
}
